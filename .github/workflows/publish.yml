name: Kotlin Multiplatform Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache dependencies
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.konan
          key: ${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kts') }}
          restore-keys: |
            ${{ runner.os }}-

      # Build for macOS and iOS
      - name: Build for macOS and iOS
        if: matrix.os == 'macos-latest'
        run: |
          ./gradlew linkDebugFrameworkIosSimulatorArm64
          ./gradlew linkDebugSharedMacosX64
          mkdir -p artifacts/macos
          cp -R ./shared/build/bin/macosX64/debugShared/* artifacts/macos/
          mkdir -p artifacts/ios
          cp -R ./shared/build/bin/iosSimulatorArm64/debugFramework/* artifacts/ios/

      # Build for Windows
      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          ./gradlew linkDebugSharedWindows
          mkdir -p artifacts/windows
          cp ./shared/build/bin/windows/debugShared/*.dll artifacts/windows/
          cp ./shared/build/bin/windows/debugShared/*.h artifacts/windows/

      # Build for Linux, Android, JVM, and JS
      - name: Build for Linux, Android, JVM, and JS
        if: matrix.os == 'ubuntu-latest'
        run: |
          ./gradlew linkDebugSharedLinuxX64
          ./gradlew assembleDebug
          ./gradlew jvmJar
          ./gradlew jsBrowserProductionWebpack
          mkdir -p artifacts/linux
          cp ./shared/build/bin/linuxX64/debugShared/* artifacts/linux/
          mkdir -p artifacts/android
          cp ./shared/build/outputs/aar/*.aar artifacts/android/
          mkdir -p artifacts/jvm
          cp ./shared/build/libs/*.jar artifacts/jvm/
          mkdir -p artifacts/js
          cp -R ./shared/build/distributions/* artifacts/js/

      # Upload artifacts to GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: debug-build-${{ github.run_id }}
          release_name: Debug Build ${{ github.run_id }}
          draft: false
          prerelease: true

      - name: Upload Artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts
          asset_name: artifacts-${{ matrix.os }}.zip
          asset_content_type: application/zip